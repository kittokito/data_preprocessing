DEVICE:53
;MODULE:MEM_WRITE
;MODULE_TYPE:1
;SCRIPT_TYPE:
;★★★  MEM_WRITE メモリーカードにデータを書き込む  ★★★
;★ ★ ★ MEM_WRITE Write data to the memory card ★ ★ ★
;■ 引数説明
;  P0		: 書込みﾌｧｲﾙが存在するﾌｫﾙﾀﾞｰ名		[DMxxx,EMxxx等、文字列の格納ｴﾘｱ]
;			:  　5階層まで100文字以内
;  P1		: 書込みﾌｧｲﾙ名						[DMxxx,EMxxx等、文字列の格納ｴﾘｱ]
;
;　P2		: 保存形式							[DMxxx,EMxxx等]
;			:  0,1:16bit/32bit BINﾃﾞｰﾀ   2,3:16bit/32bit HEXﾃﾞｰﾀ
;			:  4,5:16bit/32bit 符号なしﾊﾞｲﾅﾘｰﾃﾞｰﾀ
;			:  6,7:16bit/32bit 符号付きﾊﾞｲﾅﾘｰﾃﾞｰﾀ
;			:  8  :ｱｽｷｰ文字列ﾃﾞｰﾀ
;			:  9  :浮動小数点ﾃﾞｰﾀ
;
;　P3		: 書込みﾓｰﾄﾞ						[DMxxx,EMxxx等]
;			:  0  :追加書込み
;			:  1  :新規書込み
;
;　P4		: 行末処理							[DMxxx,EMxxx等]
;			:  0  :行末にｶﾝﾏを書込み
;			:  1  :行末に改行(CRLF)ｺｰﾄﾞを書込み
;
;　P5		: 書込みﾃﾞｰﾀ格納ｴﾘｱ					[DMxxx,EMxxx等]
;　P6		: 書込みﾃﾞｰﾀ数						[DMxxx,EMxxx等]
;
;  P7		: エラーフラグ						[MRxxx等]
;　P8		: エラー情報						[DMxxx,EMxxx等]
;■ Argument Description
;  P0: Folder name where the writing file exists [DMxxx, EMxxx, etc., storage area of ??character string]
;: Up to 5 levels up to 100 characters
;  P1: Written file name [DMxxx, EMxxx, etc., storage area of ??character string]
;
;P2: Save format [DMxxx, EMxxx, etc.]
;: 0, 1: 16 bit / 32 bit BIN data 2, 3: 16 bit / 32 bit HEX data
;: 4, 5: 16 bit / 32 bit unsigned binary data
;: 6, 7: 16 bit / 32 bit signed binary data
;: 8: ASCII character string data
;: 9: Floating point data
;
;P3: Write mode [DMxxx, EMxxx, etc.]
;: 0: Additional write
;: 1: New write
;
;P4: End of line processing [DMxxx, EMxxx, etc.]
;: 0: Write a comma at the end of the line
;: 1: Write a line feed (CRLF) code at the end of the line
;
;P5: Write data storage area [DMxxx, EMxxx, etc.]
;P6: Number of data to be written [DMxxx, EMxxx, etc.]
;
;  P7: Error flag [MRxxx etc.]
;P8: Error information [DMxxx, EMxxx, etc.]
;■ 機能
;　・P5 で指定したﾃﾞｰﾀｴﾘｱの内容を、P6 で指定したﾃﾞｰﾀ数分、ﾒﾓﾘｰｶｰﾄﾞに書込みを行う。
;
;　・ﾒﾓﾘｰｶｰﾄﾞ内に、P0 で指定された書込みﾌｫﾙﾀﾞｰを作成し、その中に、P1 で指定したﾌｧｲﾙにデータを保存する。
;　　ﾌｫﾙﾀﾞｰが複数指定されている場合、全てのﾌｫﾙﾀﾞｰを作成する。
;　　ﾌｫﾙﾀﾞｰは５階層まで作成可能。1ﾌｫﾙﾀﾞｰ当たりの最大文字数は半角20文字以内とする。
;　　　例. ﾌｫﾙﾀﾞｰ名P0:DATA\WORK1\PARA で、ﾌｧｲﾙ名P1 : MesData の場合
;　　　　　1.DATAﾌｫﾙﾀﾞｰを作成
;　　　　　2.DATAﾌｫﾙﾀﾞｰの中にWORK1ﾌｫﾙﾀﾞｰを作成
;　　　　　3.DATA\WORK1ﾌｫﾙﾀﾞｰの中にPARAﾌｫﾙﾀﾞｰを作成
;　　　　　4.DATA\WORK1\PARA\MesData ﾌｧｲﾙに書込みを行う
;
;　　　※既にフォルダーが存在する場合は、フォルダーは作成しない。
;
;　・書込みデータは、P2 で指定した保存形式で書き込まれる。
;　・また、P3 で書込みﾓｰﾄﾞを指定し、P4 で行末処理を指定する。
;
;　・エラーが発生した場合は、P7 にエラーフラグをセットし処理を終了する。
;　・また、P8 にエラー情報コードを格納する。
;　
;■ Function
;? Write the contents of the data area specified by P5 to the memory card by the number of data specified by P6.
;
;? Create a write folder specified by P0 in the memory card and save the data in the file specified by P1 in it.
;When multiple folders are specified, create all the folders.
;You can create up to 5 levels of folders. Maximum number of characters per folder is 20 characters or less.
;Example: Folder name P0: DATA \ WORK1 \ PARA and file name P1: MesData
;1. Create a DATA folder
;2. Create a WORK 1 folder in the DATA folder
;3. Create a PARA folder in the DATA \ WORK1 folder
;4. Write to the DATA \ WORK 1 \ PARA \ MesData file
;
;* If folders already exist, do not create folders.
;
;? Write data is written in the preservation format specified by P2.
;? Also, specify the write mode at P3 and specify line end processing at P4.
;
;? If an error occurs, set an error flag in P7 and end the process.
;Also, store error information code in P8.
;■ エラーフラグ(P7)をセットする条件
;  ・ﾒﾓﾘｰｶｰﾄﾞ命令が正しく実行されなかった場合。
;
;  ・P8にエラー情報を格納する。
;  　( 1〜9  : ﾒﾓﾘｰｶｰﾄﾞ命令ｴﾗｰｺｰﾄﾞ )
;  　  
;■ Conditions for setting error flag (P7)
;   ? The memory card instruction is not executed correctly.
;
;   ? Store error information in P8.
;   (1 to 9: memory card instruction error code)
;<<  初期化処理  >>/<< Initialization processing >>
LD @CR2008
RES P7                   ; Error relay
CON
DW #0 P8                 ; Error info
CON
ZRES @DM0 @DM100
CON
ZRES @EM0 @EM100
CON
ZRES @MR000 @MR215
LDF @CR2008
SET @MR000
;'フォルダー名  定義(ルート)
;'Folder name definition (root)
;
;'ﾌｫﾙﾀﾞｰ名の格納ｴﾘｱ
;'Storage area of folder name
;adrset( @EM0,@DM10.D )
;
;@DM0 = 0	'開始位置/Start position
;@DM1 = 0	'検索位置/Search position
;@DM2 = 0	'ﾌｫﾙﾀﾞｰ数/Number of folders
;
;do
;	@DM1 = instr( @DM0,P0.T,"\" )
;	if @DM1 <> $FFFF then
;		if @DM1 < len( P0.T ) then
;			*@DM10.T = left( P0.T,@DM1 )
;
;			@DM2 += 1
;			adradd( #20,@DM10.D )
;
;			@DM0 = @DM1 + 1
;		end if
;	else
;		*@DM10.T = P0.T
;		@DM2 += 1
;	end if
;
;until( @DM1 = $FFFF )
;
;'ﾌｫﾙﾀﾞｰ名の格納ｴﾘｱ
;'Storage area of folder name
;adrset( @EM0,@DM10.D )
;
;'処理開始
;'Start processing
;RES( @MR0.B )
;SET( @MR1.B )
;
LD @MR000
ANB @MR001
NCJ #1001
;'フォルダー名  定義(ルート)
;
;'Folder name definition (root)
;
;'ﾌｫﾙﾀﾞｰ名の格納ｴﾘｱ
;
;'Storage area of folder name
;
;adrset( @EM0,@DM10.D )
;
LD CR2002                ; always on
ADRSET @EM0 @DM10
;@DM0 = 0	'開始位置/Start position
;
LD CR2002                ; always on
MOV #0 @DM0
;@DM1 = 0	'検索位置/Search position
;
LD CR2002                ; always on
MOV #0 @DM1
;@DM2 = 0	'ﾌｫﾙﾀﾞｰ数/Number of folders
;
LD CR2002                ; always on
MOV #0 @DM2
;do
;
LABEL #2000
;	@DM1 = instr( @DM0,P0.T,"\" )
;
LD CR2002                ; always on
ADRSET VM2 VM0
MOV #0 VM2
MOV.D VM0 @VM0
SMOV "\" *@VM0
LD CR2002                ; always on
MOV #0 @VM2
SFIND P0 *@VM0 @VM2 @DM0 ; Folder name
LD CR2002                ; always on
MOV @VM2 @DM1
;	if @DM1 <> $FFFF then
;
LD<> @DM1 $FFFF
NCJ #2001
;		if @DM1 < len( P0.T ) then
;
LD CR2002                ; always on
MOV #0 @VM3
LEN P0 @VM3              ; Folder name
LD< @DM1 @VM3
NCJ #2002
;			*@DM10.T = left( P0.T,@DM1 )
;
LD CR2002                ; always on
ADRSET VM2 VM0
MOV #0 VM2
MOV.D VM0 @VM4
LD CR2002                ; always on
SLEFT P0 *@VM4 @DM1      ; Folder name
LD CR2002                ; always on
SMOV *@VM4 *@DM10
;			@DM2 += 1
;
LD CR2002                ; always on
INC @DM2
;			adradd( #20,@DM10.D )
;
LD CR2002                ; always on
ADRADD.S +20 @DM10
;			@DM0 = @DM1 + 1
;
LD CR2002                ; always on
LDA @DM1
CON
EXT
CON
ADD.L +1
CON
STA @DM0
;		end if
;
LABEL #2002
;	else
;
LD CR2002                ; always on
CJ #2003
LABEL #2001
;		*@DM10.T = P0.T
;
LD CR2002                ; always on
SMOV P0 *@DM10           ; Folder name
;		@DM2 += 1
;
LD CR2002                ; always on
INC @DM2
;	end if
;
LABEL #2003
;until( @DM1 = $FFFF )
;
LD= @DM1 $FFFF
CJ #2004
LD CR2002                ; always on
CJ #2000
LABEL #2004
;'ﾌｫﾙﾀﾞｰ名の格納ｴﾘｱ
;
;'Storage area of folder name
;
;adrset( @EM0,@DM10.D )
;
LD CR2002                ; always on
ADRSET @EM0 @DM10
;'処理開始
;
;'Start processing
;
;RES( @MR0.B )
;
LD CR2002                ; always on
RES @MR000
;SET( @MR1.B )
;
LD CR2002                ; always on
SET @MR001
LABEL #1001
;
;
;'フォルダー名＋ファイル名  定義(ルート)
;'Folder name + file name definition (root)
;@DM100.T = P0.T + "\" + P1.T
;
;'<< 書込みﾓｰﾄﾞの設定 >>
;'<< Setting of write mode >>
;
;'保存形式
;'Save format
;@DM20 = P2			'保存形式  ：0,1:Bin 2〜9:CSVｶﾝﾏ区切り
;'Storage format: 0, 1: Bin 2 to 9: CSV comma separated
;
;'書込みﾓｰﾄﾞ
;'Write mode
;if P3 = 0 then
;	@DM21 = 0		'追加モード/Additional mode
;else
;	@DM21 = 3		'新規モード/New mode
;end if
;
;'行末処理/End of line processing
;if P4 = 0 then
;	@DM22 = 0		'末尾にｶﾝﾏを書込む
;	'Write a comma at the end
;else
;	@DM22 = 1		'末尾にCRLFｺｰﾄﾞを書込む
;	'Write the CRLF code at the end
;end if
;
;'書込みﾃﾞｰﾀ格納ｴﾘｱ設定
;'Write data storage area setting
;adrset( P5,@DM30.D )
;
;'書込みﾃﾞｰﾀ数  設定
;'Set number of data to be written
;@DM26 = P6
;
;'処理開始
;'Start processing
;RES( @MR1.B )
;SET( @MR100.B )
;
;
LD @MR001
ANB @MR100
NCJ #1000
;'フォルダー名＋ファイル名  定義(ルート)
;
;'Folder name + file name definition (root)
;
;@DM100.T = P0.T + "\" + P1.T
;
LD CR2002                ; always on
ADRSET VM2 VM0
MOV #0 VM2
MOV.D VM0 @VM6
SMOV P0 *@VM6            ; Folder name
LD CR2002                ; always on
SADD *@VM6 "\" *@VM6
SADD *@VM6 P1 *@VM6      ; File name
SMOV *@VM6 @DM100
;'<< 書込みﾓｰﾄﾞの設定 >>
;
;'<< Setting of write mode >>
;
;'保存形式
;
;'Save format
;
;@DM20 = P2			'保存形式  ：0,1:Bin 2〜9:CSVｶﾝﾏ区切り
;
LD CR2002                ; always on
MOV P2 @DM20             ; Save form
;'Storage format: 0, 1: Bin 2 to 9: CSV comma separated
;
;'書込みﾓｰﾄﾞ
;
;'Write mode
;
;if P3 = 0 then
;
LD= P3 #0                ; Write mode
NCJ #2005
;	@DM21 = 0		'追加モード/Additional mode
;
LD CR2002                ; always on
MOV #0 @DM21
;else
;
LD CR2002                ; always on
CJ #2006
LABEL #2005
;	@DM21 = 3		'新規モード/New mode
;
LD CR2002                ; always on
MOV #3 @DM21
;end if
;
LABEL #2006
;'行末処理/End of line processing
;
;if P4 = 0 then
;
LD= P4 #0                ; End of line 
NCJ #2007
;	@DM22 = 0		'末尾にｶﾝﾏを書込む
;
LD CR2002                ; always on
MOV #0 @DM22
;	'Write a comma at the end
;
;else
;
LD CR2002                ; always on
CJ #2008
LABEL #2007
;	@DM22 = 1		'末尾にCRLFｺｰﾄﾞを書込む
;
LD CR2002                ; always on
MOV #1 @DM22
;	'Write the CRLF code at the end
;
;end if
;
LABEL #2008
;'書込みﾃﾞｰﾀ格納ｴﾘｱ設定
;
;'Write data storage area setting
;
;adrset( P5,@DM30.D )
;
LD CR2002                ; always on
ADRSET P5 @DM30          ; Data storage
;'書込みﾃﾞｰﾀ数  設定
;
;'Set number of data to be written
;
;@DM26 = P6
;
LD CR2002                ; always on
MOV P6 @DM26             ; write No
;'処理開始
;
;'Start processing
;
;RES( @MR1.B )
;
LD CR2002                ; always on
RES @MR001
;SET( @MR100.B )
;
LD CR2002                ; always on
SET @MR100
LABEL #1000
;
;<<　ﾒﾓﾘｶｰﾄﾞ ﾌｫﾙﾀﾞｰ作成　>>
;@DM10	：ﾌｫﾙﾀﾞｰ名が格納されているｱﾄﾞﾚｽ　(ﾌｫﾙﾀﾞｰ名はEM0〜EM100に格納されている)
;@DM2	：ﾌｫﾙﾀﾞｰ数
;@DM3	：ﾌｫﾙﾀﾞｰ作成数
;
;@MR10	：命令完了 通知ﾋﾞｯﾄ
;@MR11	：ｴﾗｰﾋﾞｯﾄ ON=ｴﾗｰ OFF=ｴﾗｰ無し
;
;<< Create Memory Card Folder >>
;@ DM 10: Address where folder name is stored (Folder name is stored in EM 0 ~ EM 100)
;@ DM 2: Number of folders
;@ DM 3: Number of folders created
;
;@ MR 10: Instruction completion notification bit
;@ MR 11: Error bit ON = Error OFF = No error
STG @MR100
ANB CR3214               ; mem card instr executing
JMP @MR101
STG @MR101
MPS
ANP @MR101
MMKDIR *@DM10 @MR010
MPP
ANP @MR010
MPS
AND @MR011
JMP @MR105
MPP
ANB @MR011
@INC @DM3
CON
RES @MR010
CON
JMP @MR102
STG @MR102
MPS
AND= @DM2 @DM3
JMP @MR103
MPP
AND<> @DM2 @DM3
TMH @0 #2
CON
AND @T0
ADRADD.S +20 @DM10
JMP @MR100
;<<  正常終了の場合  >>
;<< In case of normal termination >>
STG @MR103
RES @MR010
CON
RES @MR011
CON
JMP @MR200
;<<  エラー発生の場合  >>
;<< When an error occurs >>
STG @MR105
RES @MR010
CON
RES @MR011
CON
SET P7                   ; Error relay
CON
JMP @MR205
;<<　ﾒﾓﾘｶｰﾄﾞ CSVファイル書込み　>>
;@DM100	：ﾌｫﾙﾀﾞｰ名+ﾌｧｲﾙ名
;@DM30	：ﾃﾞｰﾀ格納ｴﾘｱ
;@DM26	：書込みﾃﾞｰﾀ数
;@DM20 	：ﾓｰﾄﾞﾊﾟﾗﾒｰﾀ設定
;
;@MR10	：命令完了 通知ﾋﾞｯﾄ
;@MR11	：ｴﾗｰﾋﾞｯﾄ ON=ｴﾗｰ OFF=ｴﾗｰ無し
;
;<< Writing memory card CSV file >>
;@ DM 100: Folder name + file name
;@ DM 30: Data storage area
;@ DM 26: Number of data to be written
;@ DM 20: Mode parameter setting
;
;@ MR 10: Instruction completion notification bit
;@ MR 11: Error bit ON = Error OFF = No error
;<<　ﾊﾟﾗﾒｰﾀﾃﾞｰﾀ1 書込み　>>
;<< Writing parameter data 1 >>
STG @MR200
ANB CR3214               ; mem card instr executing
JMP @MR201
STG @MR201
MPS
ANP @MR201
MWRIT @DM100 *@DM30 @DM26 @DM20 @MR010
MPP
ANP @MR010
MPS
AND @MR011
SET P7                   ; Error relay
CON
JMP @MR205
MPP
ANB @MR011
RES P7                   ; Error relay
CON
JMP @MR205
;<<　終了処理　>>
;<< End processing >>
STG @MR205
RES @MR010
CON
RES @MR011
CON
MPS
AND P7                   ; Error relay
MOV CM2390 P8            ; mem card instr err code  Error info
MRD
ENDS
MPP
MEND
END
ENDH
