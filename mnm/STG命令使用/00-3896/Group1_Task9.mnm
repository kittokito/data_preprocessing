DEVICE:53
;MODULE:Group1_Task9
;MODULE_TYPE:0
;SCRIPT_TYPE:
;OneSystem Main-Module
;
;-----------------------------------------
;ModuleName	:	Group1_Task9
;ModuleType	:	Main Module
;Line		:	
;Cell		:	
;Function	:	
;-----------------------------------------
;<<Task LocalDevice>>
;/*項目			/*割付ｴﾘｱ				/*備考
;---------------------------------------------------------------------			
;Emergency		@MR000〜@MR015			Emergency処理時RESET禁止ｴﾘｱ
;Free			@MR100〜@MR915			ﾕｰｻﾞｰﾌﾘｰｴﾘｱ
;HOME			@MR1000〜@MR1515		HOME動作時使用ｴﾘｱ
;MAINTENANCE		@MR2000〜@MR2915		MAINTE動作時使用ｴﾘｱ
;AUTO(Main1)		@MR3000〜@MR3915		AUTO(Main1)動作時使用ｴﾘｱ
;	(Main2)		@MR4000〜@MR4915		AUTO(Main2)動作時使用ｴﾘｱ
;SubRoutine		@MR4500〜@MR6415		ｻﾌﾞﾙｰﾁﾝ共通動作使用ｴﾘｱ
;----------------------------------------------------------------------
;<h1/>Device_Init/ﾃﾞﾊﾞｲｽ初期化
;[内容]
;・非常停止、優先ｴﾗｰ発生時に初期化したいﾃﾞﾊﾞｲｽを指定して下さい
;※本Taskで使用するﾛｰｶﾙﾃﾞﾊﾞｲｽなど
;※STG〜JMPにて使用しているﾃﾞﾊﾞｲｽは必須
LDP R46104
ZRES @MR100 @MR6415
;<h1/>Task_Monitor/ﾀｽｸﾓﾆﾀｰ
LD CR2002
FLIK #50 #50 @MR000
;ON STG Main1
;TYPE EM672.U,EM673.U,@MR000.U,@MR3000.U
;
;FOR EM672 = EM672 TO 160 STEP 16
;	IF @MR3000:EM672 <> 0 THEN
;		BREAK
;	END IF	
;NEXT
;	
;IF EM672 < 160 THEN
;	EM673 = (EM672 / 16) * 100 + DMX(@MR3000:EM672) + #3000
;END IF		
;		
;EM672 = EM672 + 16		
;IF EM672 > 160 THEN		
;	EM672 = 0		
;END IF
LDP @MR000
NCJ #1000
;TYPE EM672.U,EM673.U,@MR000.U,@MR3000.U
;
;FOR EM672 = EM672 TO 160 STEP 16
;
LD CR2002
MOV EM672 EM672
LABEL #2000
LD> EM672 #160
CJ #2001
;	IF @MR3000:EM672 <> 0 THEN
;
LD CR2002
LDA EM672
CON
EXT
CON
STA.L Z12
LD<> @MR3000:Z12 #0
NCJ #2002
;		BREAK
;
LD CR2002
CJ #2003
;	END IF	
;
LABEL #2002
;NEXT
;
LD CR2002
LDA EM672
CON
ADD #16
CON
STA EM672
LDB CR2009
CJ #2000
LABEL #2003
LABEL #2001
;IF EM672 < 160 THEN
;
LD< EM672 #160
NCJ #2004
;	EM673 = (EM672 / 16) * 100 + DMX(@MR3000:EM672) + #3000
;
LD CR2002
LDA EM672
CON
EXT
CON
STA.L Z12
CON
LDA @MR3000:Z12
CON
DMX
CON
STA @VM0
CON
LDA EM672
CON
EXT
CON
EXT.L
CON
DIV.L +16
CON
MUL.L +100
CON
STA.L @VM1
CON
LDA @VM0
CON
EXT
CON
ADD.L @VM1
CON
ADD.L +3000
CON
STA EM673
;END IF		
;
LABEL #2004
;EM672 = EM672 + 16		
;
LD CR2002
LDA EM672
CON
EXT
CON
ADD.L +16
CON
STA EM672
;IF EM672 > 160 THEN		
;
LD> EM672 #160
NCJ #2005
;	EM672 = 0		
;
LD CR2002
MOV #0 EM672
;END IF
LABEL #2005
LABEL #1000
;
;ON STG Main2
;TYPE EM674.U,EM675.U,@MR4000.U
;
;FOR EM674 = EM674 TO 80 STEP 16
;	IF @MR4000:EM674 <> 0 THEN
;		BREAK
;	END IF	
;NEXT	
;
;IF EM674 < 80 THEN
;	EM675 = (EM674 / 16) * 100 + DMX(@MR4000:EM674) + #4000
;END IF
;
;EM674 = EM674 + 16		
;
;IF EM674 > 80 THEN
;	EM674 = 0	
;END IF
LDP @MR000
NCJ #1001
;TYPE EM674.U,EM675.U,@MR4000.U
;
;FOR EM674 = EM674 TO 80 STEP 16
;
LD CR2002
MOV EM674 EM674
LABEL #2006
LD> EM674 #80
CJ #2007
;	IF @MR4000:EM674 <> 0 THEN
;
LD CR2002
LDA EM674
CON
EXT
CON
STA.L Z12
LD<> @MR4000:Z12 #0
NCJ #2008
;		BREAK
;
LD CR2002
CJ #2009
;	END IF	
;
LABEL #2008
;NEXT	
;
LD CR2002
LDA EM674
CON
ADD #16
CON
STA EM674
LDB CR2009
CJ #2006
LABEL #2009
LABEL #2007
;IF EM674 < 80 THEN
;
LD< EM674 #80
NCJ #2010
;	EM675 = (EM674 / 16) * 100 + DMX(@MR4000:EM674) + #4000
;
LD CR2002
LDA EM674
CON
EXT
CON
STA.L Z12
CON
LDA @MR4000:Z12
CON
DMX
CON
STA @VM3
CON
LDA EM674
CON
EXT
CON
EXT.L
CON
DIV.L +16
CON
MUL.L +100
CON
STA.L @VM4
CON
LDA @VM3
CON
EXT
CON
ADD.L @VM4
CON
ADD.L +4000
CON
STA EM675
;END IF
;
LABEL #2010
;EM674 = EM674 + 16		
;
LD CR2002
LDA EM674
CON
EXT
CON
ADD.L +16
CON
STA EM674
;IF EM674 > 80 THEN
;
LD> EM674 #80
NCJ #2011
;	EM674 = 0	
;
LD CR2002
MOV #0 EM674
;END IF
LABEL #2011
LABEL #1001
;
;ON STG SubRoutine
;TYPE EM676.U,EM677.U,@MR4500.U
;	
;FOR EM676 = EM676 TO 320 STEP 16
;	IF @MR4500:EM676 <> 0 THEN
;		BREAK
;	END IF	
;NEXT
;		
;IF EM676 < 320 THEN
;	EM677 = (EM676 / 16) * 100 + DMX(@MR4500:EM676) + #4500
;END IF
;		
;EM676 = EM676 + 16	
;
;IF EM676 > 320 THEN
;   EM676 = 0	
;END IF
LDP @MR000
NCJ #1002
;TYPE EM676.U,EM677.U,@MR4500.U
;
;FOR EM676 = EM676 TO 320 STEP 16
;
LD CR2002
MOV EM676 EM676
LABEL #2012
LD> EM676 #320
CJ #2013
;	IF @MR4500:EM676 <> 0 THEN
;
LD CR2002
LDA EM676
CON
EXT
CON
STA.L Z12
LD<> @MR4500:Z12 #0
NCJ #2014
;		BREAK
;
LD CR2002
CJ #2015
;	END IF	
;
LABEL #2014
;NEXT
;
LD CR2002
LDA EM676
CON
ADD #16
CON
STA EM676
LDB CR2009
CJ #2012
LABEL #2015
LABEL #2013
;IF EM676 < 320 THEN
;
LD< EM676 #320
NCJ #2016
;	EM677 = (EM676 / 16) * 100 + DMX(@MR4500:EM676) + #4500
;
LD CR2002
LDA EM676
CON
EXT
CON
STA.L Z12
CON
LDA @MR4500:Z12
CON
DMX
CON
STA @VM6
CON
LDA EM676
CON
EXT
CON
EXT.L
CON
DIV.L +16
CON
MUL.L +100
CON
STA.L @VM7
CON
LDA @VM6
CON
EXT
CON
ADD.L @VM7
CON
ADD.L +4500
CON
STA EM677
;END IF
;
LABEL #2016
;EM676 = EM676 + 16	
;
LD CR2002
LDA EM676
CON
EXT
CON
ADD.L +16
CON
STA EM676
;IF EM676 > 320 THEN
;
LD> EM676 #320
NCJ #2017
;   EM676 = 0	
;
LD CR2002
MOV #0 EM676
;END IF
LABEL #2017
LABEL #1002
;
;<h1/>Task_Init/ﾀｽｸ初期化
;[本STG内容]
;・本Task起動時に必要な初期化処理を記述して下さい
;・起動Taskの全Init処理終了後、Task_StartのSTGが起動します
STG LR809
ENDS
;<h1/>Task_Start/ﾀｽｸ開始
;[本STG内容]
;・Task起動後、以下運転ﾓｰﾄﾞに従い、各STGにJMPします
;【HOME】	→	LR5200
;【AUTO】	→	LR5400
;【MAINTE】	→	LR5600
;・本STGは追記、修正不要です
STG LR409
MPS
AND R46101
JMP LR5209
MRD
AND R46100
JMP LR5409
MPP
AND R46102
JMP LR5609
;<h1/>Task_Finish/ﾀｽｸ終了
;[本STG内容]
;・各Taskの終了STGになります
;・運転ﾓｰﾄﾞに係わらず終了時は本STGを経由して終了して下さい
;・本STGは追記、修正不要です
STG LR609
RES R41009
CON
ENDS
;<h1/>HOME/原点復帰
;[本STG内容]
;・STG @MR1000の続きから各Taskの原点復帰動作を記述する
;・動作終了時は@MR1515にJMPする事
STG LR5209
JMP @MR1000
STG @MR1000
JMP @MR1515
STG @MR1515
JMP LR609
;<h1/>AUTO/自動動作
STG LR5409
JMP @MR3000
;<h1/>Auto-Main1/Autoﾒｲﾝﾙｰﾁﾝ1
;[本STG内容]
;・各TaskのAUTO動作を記述して下さい
;・動作ﾓｰﾄﾞは「AUTOAC」に格納されています(1〜32)
;・@MR3000:AUTO_Main1開始、@MR3001:AUTO_Main1完了、@MR3002:AUTO_Main1動作中
STG @MR3000
JMP @MR3003
STG @MR3003
JMP @MR3915
;Auto終了処理
STG @MR3900
AND @MR4001
RES @MR4001
CON
JMP @MR3915
STG @MR3915
JMP LR609
;<h1/>Auto-Main2/Autoﾒｲﾝﾙｰﾁﾝ2
;[本STG内容]
;・@MR4000の起動はMain1にて行う事
;・@MR4000:AUTO_Main2開始、@MR4001:AUTO_Main2完了、@MR4002:AUTO_Main2動作中
STG @MR4000
SET @MR4002
CON
JMP @MR4003
STG @MR4003
JMP @MR4415
STG @MR4415
SET @MR4001
CON
RES @MR4002
CON
ENDS
;<h1/>MAINTE/ﾒﾝﾃﾅﾝｽ動作
;[本STG内容]
;・各TaskのMAINTE動作を記述して下さい
;・動作ﾓｰﾄﾞは「MAINTEAC*」に格納されています(1〜32)
;・動作終了時は@MR2915にJMPして下さい
STG LR5609
JMP @MR2000
STG @MR2000
JMP @MR2915
STG @MR2915
JMP LR609
;<h1/>ERROR
;//*Error Sample
;[使用方法]
;・@DM1にERROR番号を代入
;・@DM2にSensor番号を代入(センサ無しエラーの場合は0)
;・@DM9に復帰SW番号(1〜9、0はSW無し)をdegit単位で4桁入力
;・Task0 ERROR SET(@MR100)でエラー処理開始
;・エラー復帰でTask0 ERROR END(@MR101)がON
;・押下復帰SW番号により左から対応した@MR105,@MR106,@MR107,@MR108のいずれかがON
;・上記ONが成立したらJMPするSTGに対応する処理を記述
;Error0を左側から1,2,3,4の番号に対応した復帰選択SWを出力する
;Error Sample *//
;MyTask Error Process Substance/エラー処理実体
STG @MR100
ANB R39002
MPS
ZRES @MR105 @MR108
CON
LDA @DM9
CON
TBCD
CON
STA @DM10
CON
DISN @DM10 @DM3 #4
MRD
DW #9 @DM0
CON
BMOV @DM0 DM60000 #7
MPP
SET R39000
CON
SET @MR102
CON
JMP @MR103
STG @MR103
AND R39002
AND= DM60008 @DM1
MPS
AND= DM60007 @DM6
SET @MR105
CON
JMP @MR104
MRD
AND= DM60007 @DM5
SET @MR106
CON
JMP @MR104
MRD
AND= DM60007 @DM4
SET @MR107
CON
JMP @MR104
MPP
AND= DM60007 @DM3
SET @MR108
CON
JMP @MR104
STG @MR104
ANB R39002
RES @MR102
CON
SET @MR101
CON
ENDS
;<h1/>SELECT_ACT
;//*Select_ACT Sample
;画面番号33をブザー有りで選択SW番号を左から#5,#10,#0(無し),#34の並びで表示する
STG @MR4104
ANB R39204
SET R39204
CON
MPS
DW #33 @DM31
CON
DW #1 @DM32
CON
DW #5 @DM33
CON
DW #10 @DM34
CON
DW #0 @DM35
CON
DW #34 @DM36
MPP
SET @MR200
CON
JMP @MR4105
STG @MR4105
AND @MR201
RES @MR201
CON
RES R39204
CON
MPS
AND @MR205
JMP @MR4106
MRD
AND @MR206
JMP @MR4107
MRD
AND @MR207
JMP @MR4108
MPP
AND @MR208
JMP @MR4109
;Select_ACT Sample *//
;MyTask Select_ACT Process Substance/SELECT_ACT処理実体
STG @MR200
ANB R39202
MPS
ZRES @MR205 @MR208
CON
DW #9 @DM30
CON
BMOV @DM30 DM60030 #7
MPP
SET R39200
CON
SET @MR202
CON
JMP @MR203
STG @MR203
AND R39202
AND<> DM60037 #0
MPS
AND= DM60037 #1
SET @MR205
CON
JMP @MR204
MRD
AND= DM60037 #2
SET @MR206
CON
JMP @MR204
MRD
AND= DM60037 #3
SET @MR207
CON
JMP @MR204
MPP
AND= DM60037 #4
SET @MR208
CON
JMP @MR204
STG @MR204
ANB R39202
RES @MR202
CON
SET @MR201
CON
ENDS
;<h1/>SELECT_Y_N
;//*Select_Y_N Sample
STG @MR4203
ANB R39104
SET R39104
CON
DW #7 @DM21
CON
DW #0 @DM22
CON
SET @MR300
CON
JMP @MR4204
STG @MR4204
AND @MR301
RES @MR301
CON
RES R39104
CON
MPS
AND @MR306
JMP @MR4205
MPP
ANB @MR306
JMP @MR4206
;*Select_Y_N Sample//
;MyTask Select_Y_N Process Substance/SELECT_Y_N処理実体
STG @MR300
ANB R39102
MPS
ZRES @MR306 @MR307
CON
DW #9 @DM20
CON
BMOV @DM20 DM60020 #3
MPP
SET R39100
CON
SET @MR302
CON
JMP @MR303
STG @MR303
AND R39102
MPS
AND= DM60023 #1
SET @MR306
CON
JMP @MR304
MPP
AND= DM60023 #2
RES @MR306
CON
JMP @MR304
STG @MR304
ANB R39102
RES @MR302
CON
SET @MR301
CON
ENDS
;<h1/>TIMEUP_ERROR
;//*TIMEUP_ERROR Sample
;サンプルセンサ:MR5000=ON AND MR5001 = OFF のいずれかが5sタイムアップしたらTIMEUP_ERROR出力
;エラー復帰後、再度センサ確認
STG @MR4208
MPS
LD MR5000
ANB MR5001
ANL
JMP @MR4215
MPP
LDB MR5000
OR MR5001
ANL
TMR @0 #50
CON
AND @T0
JMP @MR4209
STG @MR4209
ANB R39304
SET R39304
CON
DW #16 @DM41
CON
SET @MR400
CON
JMP @MR4210
STG @MR4210
AND @MR401
RES R39304
CON
RES @MR401
CON
JMP @MR4208
;TIMEUP_ERROR Sample *//
;MyTask TIMEUP_ERROR Process Substance/TIMEUP_ERROR処理実体
STG @MR400
ANB R39302
MPS
DW #9 @DM40
CON
BMOV @DM40 DM60040 #2
MPP
SET R39300
CON
SET @MR402
CON
JMP @MR403
STG @MR403
AND R39302
JMP @MR404
STG @MR404
ANB R39302
RES @MR402
CON
SET @MR401
CON
ENDS
;<h1/>SubRoutines/ｻﾌﾞﾙｰﾁﾝ
;[記述方法]
;・ｻﾌﾞﾙｰﾁﾝは本ﾌﾞｯｸﾏｰｸから下に記述していって下さい
;・ｻﾌﾞﾙｰﾁﾝは必ずﾌﾞｯｸﾏｰｸを挿入して処理内容を明確にする事
;<h1/>HALT
LD R41209
AND @MR1900
LD @MR1901
ORB @MR4002
ANL
TMR @2 #2
CON
AND @T2
@SET R42609
LD R42609
RES @MR1900
CON
RES @MR1901
END
ENDH
